use std::io::stdin;

/*
TODO: добавить периметр
Функции для задачи: .abs(), .sin(), .pow()
x - [0]
y - [1]
*/

//Функция main служит для считывания ввода и коммуникации с пользователем (фронтенд)
fn main() {
    println!("Введите значение переменных (сначала Х, потом У):"); //вывод сообщения с просьбой ввести значение переменных
    println!("a:");
    let a: [f64; 2] = [read_var(), read_var()]; //создание массивов и их заполнение вводом пользователя
    println!("b:");
    let b: [f64; 2] = [read_var(), read_var()];
    println!("c:");
    let c: [f64; 2] = [read_var(), read_var()];
    calc(a, b, c);
    pause(); //использование фунции паузы
}

fn calc(a: [f64; 2], b: [f64; 2], c: [f64; 2] ) {
    let ab: f64 = ((b[0] - a[0]).powi(2) + (b[1] - a[1]).powi(2)).sqrt(); //сначала по пифагору находятся стороны
    let bc: f64 = ((c[0] - b[0]).powi(2) + (c[1] - b[1]).powi(2)).sqrt();
    let ca: f64 = ((c[0] - a[0]).powi(2) + (c[1] - a[1]).powi(2)).sqrt();
    let p: f64 = (ab + bc + ca)/2.0; //потом полупериметр
    let s: f64 = (p*(p-ab)*(p-bc)*(p-ca)).sqrt(); //потом площадь по герону
    let p: f64 = p*2.0; //полупериметр затмевается периметром
    println!("Результат: S={s}, P={p}");
}

//функция  служит для считывания ввода пользователя и преобразование его в f64
fn read_var() -> f64 {
    loop {
        let mut x =String::new();
        stdin()
            .read_line(&mut x)
            .expect("Ошибка чтения ввода"); //считывание ввода и запись его в переменную X (с точки зрения компилятора это одна строка)

        let x: f64 = match x.trim().parse() {
            Ok(num) => num,
            Err(_) => {
                println!("Переменная должна быть равна числу");
                continue;
            },
        }; //преобразование ввода со string в float-point integer с перезапуском loop в случае ошибки
        break x;
    }
}

fn pause() { //фукция паузы
    println!("нажмите Enter чтобы выйти.");
    let mut q = String::new();
    stdin().read_line(&mut q).expect("ошибка");
}